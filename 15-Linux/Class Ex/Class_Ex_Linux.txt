#!/usr/bin/env bash
#
# exercises.sh
# A Bash script that prints a series of Linux/shell-related class exercises.

cat <<'EOF'

=====================================================
 LINUX CLASS EXERCISES
=====================================================

Exercise 1: Text Processing Pipeline
------------------------------------
Q1:
You have a file named corpus.txt with mixed-case text. Convert all text to lowercase,
split tokens by non-alphanumeric characters, remove stopwords stored in stopwords.txt,
and display the top 10 most frequent words.

Hint:
Use tr for case conversion and splitting, grep -v -w -f for removing stopwords,
sort and uniq -c for counting duplicates, then sort -nr and head.



Exercise 2: grep Flags
----------------------
Q2:
Explain what each of these grep flags does: -F, -w, -v, and -f <file>.

Hint:
Check man grep or grep --help to see how each flag modifies search behavior.




Exercise 3: Shell Script Safety
-------------------------------
Q3:
Why might you place 'set -euo pipefail' at the top of a Bash script?
Briefly explain what -e, -u, and -o pipefail do.

Hint:
They help catch errors early and prevent unexpected behavior.




Exercise 4: Command-Line Arguments
----------------------------------
Q4:
You have a script that accepts optional arguments --model, --epochs, and --corpus.
Show a snippet that parses these flags in a while [[ $# -gt 0 ]] ... loop using case.

Hint:
Store "$2" in a variable, then shift 2 to remove the flag and its value.



Exercise 5: Simple Counters in a Sentiment Script
-------------------------------------------------
Q5:
You have counters pos=0, neg=0, and neu=0. Each line is classified as POS, NEG, or NEU.
Show how you'd increment these counters based on a variable label.

Hint:
Use a case block with ((...)) arithmetic.




Exercise 6: Sorting and Counting
--------------------------------
Q6:
Count how many times each word occurs in words.txt, then list them in descending order.

Hint:
Use sort, uniq -c, then sort -nr.




Exercise 7: Date and Logging
----------------------------
Q7:
A script uses TIMESTAMP=$(date +"%Y%m%d_%H%M%S"). Why might you include the timestamp
in folder names or log files?

Hint:
Helps keep track of runs and avoid overwriting old data.



Exercise 8: Directory Management
--------------------------------
Q8:
Explain mkdir -p "$DATA_DIR" "$RUN_DIR" "$REPORT_DIR" and why -p is helpful.

Hint:
-p creates parent directories as needed. Without it, mkdir fails if the parent dirs
do not exist.



Exercise 9: Exit Codes
----------------------
Q9:
Why check the exit code of commands or rely on set -e in a pipeline?

Hint:
A command might fail silently and the script would continue with incomplete or
invalid data.



Exercise 10: Combining Shell and Python
---------------------------------------
Q10:
Why use shell for certain tasks (file manipulation, environment setup) and Python
for others (tokenization, training models) in the same pipeline?

Hint:
Shell is good for quick, simple file ops. Python is better for complex logic, data
structures, and ML libraries.



EOF
